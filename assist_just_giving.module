<?php

require_once('inc/assist_just_giving_helpers.inc.php');

function assist_just_giving_node_presave($node) {
    if ($node->type == 'just_giving_batch') {
        $filename = file_load($node->field_file['und'][0]['fid'])->uri;
        $node->field_results['und'][0]['value'] = assist_just_giving_import($filename);
    }
}

function assist_just_giving_import($filename) {
    try {
        $justGivingRows = AssistJustGivingHelpers::csvFileToArray($filename);
        $transformer = new AssistJustGivingTransformer($justGivingRows);
        $communicator = new AssistJustGivingCommunicator();
        $contacts = $transformer->getContacts();
        return $communicator->ensureContactsExist($contacts);
    } catch(Exception $e) {
        return $e->getMessage();
    } 
}

class AssistJustGivingTransformer {
    private $justGivingIDFieldName = "custom_1";
    private $justGivingRows;
    public function __construct(array $justGivingRows) {
        $this->justGivingRows = $justGivingRows;
    }
    public function getContacts() {
        $contacts = array();
        $doneIDs = array();
        foreach($this->justGivingRows as $row) {
            if ($row['Fundraiser User Id']) {
                $fundraiserID = $row["Fundraiser User Id"];
                $contacts[$fundraiserID] = $this->getContact($row, "Fundraiser");
            }
            if ($row["Donor E-mail"] !== "Anonymous") {
                $donorID = $row["Donor User Id"];
                $contacts[$donorID] = $this->getContact($row, "Donor");
            }
        } 
        return $contacts;
    }  
    private function getContact($row, $prefix) {
        return array(
            $this->justGivingIDFieldName => $row["$prefix User Id"],
            "contact_type" => "Individual",
            "first_name" => $row["$prefix FirstName"],
            "last_name" => $row["$prefix LastName"],
            "email" => $row["$prefix E-mail"],
            "source" => "Just Giving Import " . date("Y-m-d")
        );
    }
}


class AssistJustGivingCommunicator {
    private $justGivingIDFieldName = "custom_1";

    private function formatError($errorString) {
        // Aim to change this wrapping to add colour via HTML
        return "***ERROR: $errorString ***";
    }

    public function ensureContactsExist($contacts) {
        $feedback = '';
        civicrm_initialize();
        foreach($contacts as $justGivingID => $contact) {
            try {
                if ($this->justGivingIDExistsInCivi($justGivingID)) {
                    continue;
                } elseif ($contactId = $this->findContactAndAddJustGivingID($contact, $justGivingID)) {
                    $feedback .= "Added Just Giving ID $justGivingID to contact $contactId ... ";
                } else {
                    $results = civicrm_api3('Contact', 'create', $contact);
                    $contactId = $results['id'];
                    error_log(print_r($results, true));
                    $feedback .= "Created contact $contactId with Just Giving ID $justGivingID ... ";
                }
            } catch (Exception $e) {
                $feedback .= $this->formatError("Just Giving ID $justGivingID: " . $e->getMessage()) . " ... ";
            }
        }
        return $feedback . 'All done!';
    }
    private function justGivingIDExistsInCivi($justGivingID) {
        return civicrm_api3('Contact', 'get', array(
            $this->justGivingIDFieldName => $justGivingID
        ))["count"] > 0;
    }
    private function findContactAndAddJustGivingID($contact, $justGivingID) {
        $candidates =  civicrm_api3('Contact', 'get', array(
            "first_name" => $contact["first_name"],
            "last_name" => $contact["last_name"],
            // This lets us match any email; just including it as
            // a field would only match primary
            "api.Email.get" => array("email" => $contact["email"])    
        ))["values"];
        // If there's more than one match, we don't care which one is used.
        foreach ($candidates as $candidate) {
            // Candidates are returned even if there is no match on
            // email, but email is returned only if it matches
            if ($candidate["api.Email.get"]["count"] > 0) {
                civicrm_api3("Contact", "create", array(
                    "id" => $candidate["id"],
                    $this->justGivingIDFieldName => $justGivingID
                ));
                return $candidate["id"];
            }
        }
    }
}
