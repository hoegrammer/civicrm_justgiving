<?php

require_once('inc/assist_just_giving_helpers.inc.php');
require_once('inc/config.php');

function assist_just_giving_node_presave($node) {
    if ($node->type == 'just_giving_batch') {
        $filename = file_load($node->field_file['und'][0]['fid'])->uri;
        $node->field_results['und'][0]['value'] = assist_just_giving_import($filename);
    }
}

function assist_just_giving_import($filename) {
    try {
        $extractor = new AssistJustGivingDataExtractor($filename);
        $communicator = new AssistJustGivingCommunicator();
        $anonJGtoCiviIDMap = $extractor->mapAnonJustGivingIDsToAnonCiviID();
        $contacts = $extractor->extractContacts();
        if ($namedJGtoCiviIDMap = $communicator->ensureContactsExistAndCreateMap($contacts)) {
            // The order of adding the two maps is important. If the second map has keys
            // in common with the first they are thrown away. If the same JG ID exists against
            // both Anon and a person, we want the person to get it.
            $donations = $extractor->extractDonations($namedJGtoCiviIDMap + $anonJGtoCiviIDMap);
            $communicator->recordDonations($donations);
        }
        return $communicator->getFeedback();
    } catch(Exception $e) {
        return $e->getMessage();
    } 
}

class AssistJustGivingDataExtractor {
    private $justGivingRows;
    public function __construct($filename) {
        $this->justGivingRows = AssistJustGivingHelpers::verifyFileAndExtractData($filename);
    }
    public function mapAnonJustGivingIDsToAnonCiviID() {
        global $anonymousCiviID;
        $anonJGtoCiviIDMap = array();
        foreach($this->justGivingRows as $row) {
            if ($row["Donor E-mail"] === "Anonymous") {
                $justGivingID = $row["Donor User Id"];
                $anonJGtoCiviIDMap[$justGivingID] = $anonymousCiviID;
            }
        } 
        return $anonJGtoCiviIDMap;
    }
    public function extractDonations($fullJGtoCiviIDMap) {
        $donations = array();
        foreach($this->justGivingRows as $row) {
            $donations[] = $this->extractDonation($row, $fullJGtoCiviIDMap);
        } 
        return $donations;
    }
    public function extractContacts() {
        $contacts = array();
        foreach($this->justGivingRows as $row) {
            if ($row['Fundraiser User Id']) {
                $justGivingID = $row["Fundraiser User Id"];
                $contacts[$justGivingID] = $this->extractContact($row, "Fundraiser");
            } // A single row can contain both a fundraiser and a donor
            if ($row["Donor E-mail"] !== "Anonymous") {
                $justGivingID = $row["Donor User Id"];
                $contacts[$justGivingID] = $this->extractContact($row, "Donor");
            }
        } 
        return $contacts;
    }  
    private function extractContact($row, $prefix) {
        global $justGivingIDFieldName; 
        return array(
            $justGivingIDFieldName => $row["$prefix User Id"],
            "contact_type" => "Individual",
            "first_name" => $row["$prefix FirstName"],
            "last_name" => $row["$prefix LastName"],
            "email" => $row["$prefix E-mail"],
            "postal_code" => $row["$prefix Postcode"],
            "city" => $row["$prefix Town"],
            "street_address" => $row["$prefix Address Line 1"],
            "supplemental_address" => $row["$prefix Address Line 2"],
            "location_type_id" => "Home",  
            "source" => "Just Giving Import " . date("Y-m-d")
        );
    }
    private function extractDonation($row, $fullJGtoCiviIDMap) {
        global $eventSponsorshipFieldName;
        $donorCiviId = $fullJGtoCiviIDMap[$row["Donor User Id"]];
        $receiveDate = DateTime::createFromFormat('d/m/Y',$row["Donation Date"]);  // Expecting UK format: dd/mm/yyyy
        $donation = array(
            "contact_id" => $donorCiviId,
            "total_amount" => $row["Donation Amount"],  
            "net_amount" => $row["Net Donation Amount"],
            "fee_amount" => $row["Net Total Charge"],
            "contribution_source" => "Just Giving Upload " . date("Y-m-d H:i:s"),
            "payment_instrument_id" => "Just Giving",
            "custom_154" => 0, // That's the API field for "Eligible for Gift Aid"
            "custom_142" => "Unrestricted", // That's the API field for "Income Condition"
            "receive_date" => $receiveDate->format('Y-m-d')
        );
        // If there is a fundraiser for the donation then it needs a soft credit.
        // This is done by "API Chaining" (worked out using Civi API Explorer).
        if ($row["Fundraiser User Id"]) {
          $fundraiserCiviId = $fullJGtoCiviIDMap[$row["Fundraiser User Id"]];
          $donation['api.ContributionSoft.create'] = array(
            'contact_id' => $fundraiserCiviId, 'amount' => $row["Donation Amount"]
          );
          $donation[$eventSponsorshipFieldName] = 1;
          $donation['financial_type_id'] = "Fundraising";
        }
        else {
          if ($row["Payment Frequency"] == "Monthly") {
            $donation["financial_type_id"] = "Regular donations";
          }
          else {
            $donation["financial_type_id"] = "Irregular donations";
          }
        }
        return $donation;
    }
}


class AssistJustGivingCommunicator {
    private $feedback = null;

    private function formatError($errorString) {
        // Aim to change this wrapping to add colour via HTML
        return "***ERROR: $errorString ***";
    }

    public function getFeedback() {
        return $this->feedback;
    }

    public function ensureContactsExistAndCreateMap($contacts) {
        civicrm_initialize();
        $namedJGtoCiviIDMap = array();
        $success = true;
        foreach($contacts as $justGivingID => $contact) {
            try {
                if ($civiId = $this->findContactWithJustGivingID($justGivingID)) {
                    ;
                } elseif ($civiId = $this->findContactAndAddJustGivingID($contact, $justGivingID)) {
                    $this->feedback .= "Added Just Giving ID $justGivingID to contact $civiId ... ";
                } else {
                    $civiId = $this->recordContact($contact);
                    $this->feedback .= "Created contact $civiId with Just Giving ID $justGivingID ... ";
                }
                $namedJGtoCiviIDMap[$justGivingID] = $civiId;
            } catch (Exception $e) {
                $this->feedback .= $this->formatError("Just Giving ID $justGivingID: " . $e->getMessage()) . " ... ";
                $success = false;
            }
        }
        if (!$success) {
            $this->feedback .= " INFO: NO DONATIONS ADDED DUE TO PRIOR ERRORS SHOWN ABOVE";
        }
        return $success ? $namedJGtoCiviIDMap : false;
    }

    private function recordContact($contact) {
        $civiContact = civicrm_api3('Contact', 'create', $contact); // doesn't handle address data...
        
        // ...so now also add address data
        $contact['contact_id'] = $civiContact['id'];
        civicrm_api3('Address', 'create', $contact);
        return $civiContact['id'];
    }
    public function recordDonations($donations) {
        try {
            forEach($donations as $donation) {
                civicrm_api3('Contribution', 'create', $donation);
                $amount = $donation['total_amount'];
                $civiId = $donation['contact_id'];
                $this->feedback .= "Added donation of Â£$amount from contact $civiId ";
                if (isset($donation['api.ContributionSoft.create'])) {
                  $this->feedback .= "Soft credited to " . $donation['api.ContributionSoft.create']['contact_id'];
                }
                $this->feedback .= ' ... ';
            }
        } catch(Exception $e) {
            $this->feedback .= $this->formatError($e->getMessage()) . " ... ";
            $this->feedback .= "INFO: Recording donations aborted due to error. Please delete all donations that have been added before starting again.";
        }
    }
    private function findContactWithJustGivingID($justGivingID) {
        global $justGivingIDFieldName;
        $results = civicrm_api3('Contact', 'get', array(
            "sequential" => 1,
            $justGivingIDFieldName => $justGivingID
        ));
        if ($results['count'] == 0) return false;
        return $results['values'][0]['id'];
    }
    private function findContactAndAddJustGivingID($contact, $justGivingID) {
        global $justGivingIDFieldName;
        $candidates =  civicrm_api3('Contact', 'get', array(
            "first_name" => $contact["first_name"],
            "last_name" => $contact["last_name"],
            // This lets us match any email; just including it as
            // a field would only match primary
            "api.Email.get" => array("email" => $contact["email"])    
        ))["values"];
        // If there's more than one match, we don't care which one is used.
        foreach ($candidates as $candidate) {
            // Candidates are returned even if there is no match on
            // email, but email is returned only if it matches
            if ($candidate["api.Email.get"]["count"] > 0) {
                civicrm_api3("Contact", "create", array(
                    "id" => $candidate["id"],
                    $justGivingIDFieldName => $justGivingID
                ));
                return $candidate["id"];
            }
        }
    }
}
